// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AcademicLevel {
  ONE_HUNDRED
  TWO_HUNDRED
  THREE_HUNDRED
  FOUR_HUNDRED
  FIVE_HUNDRED
  SIX_HUNDRED
}

enum GroupVisibility {
  PUBLIC
  PRIVATE
}

enum Role {
  STUDENT
  PRO
  ADMIN
}

enum GroupStatus {
  PENDING
  BANNED
  REMOVED
  ACTIVE
}

model Faculty {
  id String @id @default(cuid())
  name String
  users User[]
  departments Department[]
}

model Department {
  id String @id @default(cuid())
  name String
  users User[]
  faculty Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId String
}


model Admin {
  id  String  @id @default(cuid())
  email String
  hashPassword  String
}

model User {
  id       String   @id @default(cuid())
  name   String
  email     String   @unique
  faculty      Faculty @relation(fields: [facultyId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])
  facultyId  String
  departmentId  String
  createdAt DateTime @default(now())
  academicLevel AcademicLevel
  groups GroupMember[]
  hashPassword String
  role Role
}

model Group {
  id String @id @default(cuid())
  name String @unique
  visibility GroupVisibility @default(PUBLIC)
  description String
  messages Message[]
  notifications Notification[]
  members GroupMember[]
}

model GroupMember {
  id String @id @default(cuid())
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  user User @relation(fields: [userId], references: [id])
  userId String
  joined DateTime @default(now())
  role Role
  status GroupStatus
}

model Notification {
  id  String @id @default(cuid())
  group Group @relation(fields: [groupId], references: [id])
  groupId String
}



model Message {
  id String @id @default(cuid())
  text String
  created_at DateTime @default(now())
  group Group @relation(fields: [groupId], references: [id])
  groupId String
}